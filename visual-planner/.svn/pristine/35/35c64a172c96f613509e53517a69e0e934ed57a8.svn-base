#include "kkpoplansql.h"

kkPOPlanSQL::kkPOPlanSQL(QString directory)
{
    /*planSQL = QSqlDatabase::addDatabase("QSQLITE");
    planSQL.setDatabaseName(directory);
    if (!planSQL.open()) {
        QMessageBox::critical(0, "Cannot open database",
        "Unable to establish a database connection.\n"\
              "This example needs SQLite support. Please read "\
              "the Qt SQL driver documentation for information how "\
              "to build it.\n\n"\
              "Click Cancel to exit.", QMessageBox::Cancel);
    }*/
}

bool kkPOPlanSQL::changeSQLDir(QString directory)
{
    planSQL.setDatabaseName(directory);
    if (!planSQL.open()) {
        QMessageBox::critical(0, "Cannot open database",
        "Unable to establish a database connection.\n"\
              "This example needs SQLite support. Please read "\
              "the Qt SQL driver documentation for information how "\
              "to build it.\n\n"\
              "Click Cancel to exit.", QMessageBox::Cancel);
    }
}

kkPOPlanSQL::~kkPOPlanSQL()
{

}

void kkPOPlanSQL::savePlan()
{
    QSqlQuery squery, planQuery;
    if(!planSQL.tables().contains("poplanlist"))
        squery.exec("DROP TABLE plan5agent;");

    for(int i = 0; i < planSQL.tables().count(); i++)
    {
        squery.exec("DROP TABLE "+planSQL.tables().at(i)+";");
    }

    squery.exec("CREATE TABLE poplanlist (id int PRIMARY KEY, pname varchar(16), pmode int,"\
                " psize int, pball varchar(16), pagent1 varchar(16), pagent2 varchar(16),"\
                " pagent3 varchar(16), pagent4 varchar(16), pagent5 varchar(16), pagent6 varchar(16) )");

    QString tempTableName = "";
    QString tempTableStruct = " (id int PRIMARY KEY ";
    for(int i = 1; i < 7; i++)
    {
        QString tids = QString::number(i);
        tempTableStruct += " , r"+tids+"geo varchar(24), r"+tids+"tol varchar(8), r"+tids+"ssize varchar(8), ";
        tempTableStruct += " r"+tids+"skill1 varchar(24) , r"+tids+"skill2 varchar(24) , r"+tids+"skill3 varchar(24) ,  r"+tids+"ptarget varchar(8) ";
    }
    tempTableStruct += " );";
    qDebug()<<tempTableStruct;
    QString tempInitStr[7];
    QString tempQStr;
    for(int i = 0; i < planList.count(); i++)
    {
        tempTableName = "plan_"+QString::number(i);
        if(planList.at(i).initPos.ballX == -100 || planList.at(i).initPos.ballY == -100)
            tempInitStr[0] = "na";
        else
            tempInitStr[0] = QString::number(planList.at(i).initPos.ballX)+"|"+QString::number(planList.at(i).initPos.ballY);

        for(int j = 0; j < 6; j++)
        {
            if(planList.at(i).initPos.AgentX[j] == -100 || planList.at(i).initPos.AgentY[j] == -100)
                tempInitStr[j+1] = "na";
            else
                tempInitStr[j+1] = QString::number(planList.at(i).initPos.AgentX[j])+"|"+QString::number(planList.at(i).initPos.AgentY[j]);
        }
        tempQStr = "INSERT INTO poplanlist VALUES ("+QString::number(i)+", '"+tempTableName+"' , "\
                   " "+QString::number(int(planList.at(i).planMode))+" , "+QString::number(planList.at(i).agentSize)+" , "\
                   " '"+tempInitStr[0]+"' , '"+tempInitStr[1]+"' , '"+tempInitStr[2]+"' , '"+tempInitStr[3]+"' , "\
                   " '"+tempInitStr[4]+"' , '"+tempInitStr[5]+"' , '"+tempInitStr[6]+"' );";

        squery.exec(tempQStr);

        squery.exec("CREATE TABLE "+tempTableName+" "+tempTableStruct);
        addEachPlanToSql(planList.at(i), tempTableName);
    }
}

int kkPOPlanSQL::findMaxSteps(planStruct &_plan)
{
    int max = -1;
    for(int i = 0; i < 6; i++)
    {
        if(max < _plan.AgentPlan[i].count())
            max = _plan.AgentPlan[i].count();
    }
    return max;
}

void kkPOPlanSQL::addEachPlanToSql(planStruct _plan, QString tName)
{
    int maxStep = findMaxSteps(_plan);
    for(int i = 0; i < maxStep; i++)
    {
        addStepToSql(tName, i,
                    _plan.AgentPlan[0],
                    _plan.AgentPlan[1],
                    _plan.AgentPlan[2],
                    _plan.AgentPlan[3],
                    _plan.AgentPlan[4],
                    _plan.AgentPlan[5]);
    }
}

void kkPOPlanSQL::addStepToSql(QString tName, int tid, QList<playOffRobot> &tA1, QList<playOffRobot> &tA2, QList<playOffRobot> &tA3, QList<playOffRobot> &tA4, QList<playOffRobot> &tA5, QList<playOffRobot> &tA6)
{
    QString tempStr = "";
    if(tA1.count() - 1 > tid)
        tempStr += convertStructToSQLCmd(1, tA1.at(tid));
    else
        tempStr += convertEmptyStructToSQLCmd(1);

    if(tA2.count() - 1 > tid)
        tempStr += " , "+convertStructToSQLCmd(2, tA2.at(tid));
    else
        tempStr += " , "+convertEmptyStructToSQLCmd(2);

    if(tA3.count() - 1 > tid)
        tempStr += " , "+convertStructToSQLCmd(3, tA3.at(tid));
    else
        tempStr += " , "+convertEmptyStructToSQLCmd(3);

    if(tA4.count() - 1 > tid)
        tempStr += " , "+convertStructToSQLCmd(4, tA4.at(tid));
    else
        tempStr += " , "+convertEmptyStructToSQLCmd(4);

    if(tA5.count() - 1 > tid)
        tempStr += " , "+convertStructToSQLCmd(5, tA5.at(tid));
    else
        tempStr += " , "+convertEmptyStructToSQLCmd(5);

    if(tA6.count() - 1 > tid)
        tempStr += " , "+convertStructToSQLCmd(6, tA6.at(tid));
    else
        tempStr += " , "+convertEmptyStructToSQLCmd(6);

    tempStr = "INSERT INTO "+tName+" VALUES ( "+QString::number(tid)+" , "+tempStr+" ); ";
    QSqlQuery tempQuery;
    tempQuery.exec(tempStr);
    qDebug()<< "SqLite error:" << tempQuery.lastError().text() << ", SqLite error code:" << tempQuery.lastError().number();
}

QString kkPOPlanSQL::convertStructToSQLCmd(int _agentId, playOffRobot tStep)
{
    QString tempStr;
    tempStr += " '";
    //robot geo
    tempStr += QString::number(tStep.x)+"|";
    tempStr += QString::number(tStep.y)+"|";
    tempStr += QString::number(tStep.angle);
    tempStr += "' , '";
    //tolerance
    tempStr += QString::number(tStep.tolerance);
    tempStr += "' , '";
    //skill size
    tempStr += QString::number(tStep.skillSize);
    tempStr += "' , '";
    //skill1
    tempStr += QString::number(int(tStep.skill[0]))+"|";
    tempStr += QString::number(int(tStep.skillData[0][0]))+"|";
    tempStr += QString::number(int(tStep.skillData[0][1]));
    tempStr += "' , '";
    //skill2
    tempStr += QString::number(int(tStep.skill[1]))+"|";
    tempStr += QString::number(int(tStep.skillData[1][0]))+"|";
    tempStr += QString::number(int(tStep.skillData[1][1]));
    tempStr += "' , '";
    //skill3
    tempStr += QString::number(int(tStep.skill[2]))+"|";
    tempStr += QString::number(int(tStep.skillData[2][0]))+"|";
    tempStr += QString::number(int(tStep.skillData[2][1]));
    tempStr += "' , '";
    //pass target
    tempStr += QString::number(tStep.target.agent)+"|";
    tempStr += QString::number(tStep.target.index);
    tempStr += "' ";
    return tempStr;

}

QString kkPOPlanSQL::convertEmptyStructToSQLCmd(int _agentId)
{
    QString tempStr;
    tempStr += " '";
    tempStr += "na";
    tempStr += "' , '";
    tempStr += "na";
    tempStr += "' , '";
    tempStr += "na";
    tempStr += "' , '";
    tempStr += "na";
    tempStr += "' , '";
    tempStr += "na";
    tempStr += "' , '";
    tempStr += "na";
    tempStr += "' , '";
    tempStr += "na";
    tempStr += "' ";
    return tempStr;
}

int kkPOPlanSQL::addPlan(QList<playOffRobot> tPlan[], POInitPos tInitPos, POMODE tPOMode, int agentSize, int itemId)
{
    planStruct tempPlan;
    tempPlan.agentSize = agentSize;
    tempPlan.planMode = tPOMode;
    tempPlan.initPos = tInitPos;

    playOffRobot tempPOP;
    for(int i = 0; i < agentSize; i++)
    {
        for(int j = 0; j < tPlan[i].count(); j++)
        {
            tempPOP = tPlan[i].at(j);
            tempPlan.AgentPlan[i].append(tempPOP);
        }
    }
    if(itemId == -1)
        planList.append(tempPlan);
    else
        planList.replace(itemId, tempPlan);

    return planList.count();
}

void kkPOPlanSQL::disableSQL()
{
    planSQL.close();
    //planSQL.removeDatabase(planSQL.connectionName());
}

void kkPOPlanSQL::enableSQL()
{
    planSQL = QSqlDatabase::addDatabase("QSQLITE");
    planSQL.setDatabaseName("temppo.db");
    if (!planSQL.open()) {
        QMessageBox::critical(0, "Cannot open database",
        "Unable to establish a database connection.\n"\
              "This example needs SQLite support. Please read "\
              "the Qt SQL driver documentation for information how "\
              "to build it.\n\n"\
              "Click Cancel to exit.", QMessageBox::Cancel);
    }
}

