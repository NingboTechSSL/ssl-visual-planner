#include "playoff.h"

playoff::playoff(QWidget *parent) :
                 QWidget(parent)
{
    fieldPix = new QPixmap("image/double-sized-field.png");
    currentRobot.agent = -1;
    currentRobot.index = -1;
    currentRobot.skillNum = 0;
    displayMode = -1;
    currentAgent = 0;
    showAll = false;
    agentSize = 1;
    currentSkillNum = 0;

    POFieldSelected = false;

    currentTool = TMOVE;
    currentPOMode = KICKOFF;

    PORubberBand = new QRubberBand(QRubberBand::Rectangle, parent);

    rbBeginPoint = rbEndPoint = QPoint(0, 0);
    validRubberBand = false;
    moveRubberBand = false;
    rbStarted = false;

    QPalette pal;
    pal.setBrush(QPalette::Highlight, QBrush(Qt::blue, Qt::Dense4Pattern));
    PORubberBand->setPalette(pal);
}

playoff::~playoff()
{

}

void playoff::setLabel(QLabel *tLabel)
{
    fieldLabel = tLabel;
}

void playoff::setWidget(QWidget *tWidget)
{
    POWidget = tWidget;
    POinitLables();
    POSetSelectedDisplayLabel(getDisplayMode());
    POSetSelectedCurrentAgentLabel(getCurrentAgent());
}

void playoff::setLineEdits(QLineEdit *_posX, QLineEdit *_posY, QLineEdit *_posAng, QLineEdit *_posTol)
{
    POTBPosX = _posX;
    POTBPosY = _posY;
    POTBPosAng = _posAng;
    POTBPosTol = _posTol;
}

void playoff::setStatusBar(QStatusBar *_statusBar)
{
    statusBar = _statusBar;
}

void playoff::setAgentSizeCB(QComboBox *_comboBox)
{
    agentSizeCB = _comboBox;
}

void playoff::mousePressed(QMouseEvent *event, QPoint tempPos)
{
    if(fieldLabel->underMouse())
    {
        if(currentTool == TMOVE)
        {
            if(event->buttons() == Qt::LeftButton)
            {
                if(validRubberBand)
                {
                    if(QRect(rbBeginPoint, rbEndPoint).normalized().contains(event->pos()))
                    {
                        baseMove = event->pos();
                        moveRubberBand = true;
                        rbMoveBase = PORubberBand->geometry().topLeft();
                        toMoveAgentList.clear();
                        toMoveAgentList = getSelectedAgents(displayMode);
                        fillFirstPointsList(toMoveAgentList);
                        //minor bug
                        currentRobot.agent = -1;
                        currentRobot.index = -1;
                    }
                    else
                    {
                        rbBeginPoint = rbEndPoint = QPoint(0, 0);
                        PORubberBand->hide();
                        PORubberBand->setGeometry(QRect(rbBeginPoint, rbEndPoint).normalized());
                        validRubberBand = false;
                    }
                }
                else
                {
                    POFieldSelected = true;
                    POCurrentRobot = getRobot(tempPos);
                    if(!POCurrentRobot.isAng)
                    {
                        if(POCurrentRobot.agent == -1)
                            placeRobot(tempPos, getCurrentAgent(), true);
                    }
                    else
                    {
                        turnRobotAng(tempPos, POCurrentRobot.agent, POCurrentRobot.index);
                        qDebug()<<"Ang";
                    }
                }
            }
            else if(event->buttons() == Qt::MidButton)
            {
                POCurrentRobot = getRobot(tempPos);
                if(POCurrentRobot.agent != -1)
                    removeRobot(POCurrentRobot.agent, POCurrentRobot.index);
                POCurrentRobot.agent= -2;
                POCurrentRobot.index = -2;
            }
        }
        else if(currentTool == TDELETE)
        {
            if(event->buttons() == Qt::LeftButton)
            {
                if(validRubberBand)
                {
                    if(QRect(rbBeginPoint, rbEndPoint).normalized().contains(event->pos()))
                    {
                        QList<agentAndIndex> tempList;
                        tempList = getSelectedAgents(displayMode);

                        removeSelectedRobots(tempList);
                    }
                    /////////
                    rbBeginPoint = rbEndPoint = QPoint(0, 0);
                    PORubberBand->hide();
                    PORubberBand->setGeometry(QRect(rbBeginPoint, rbEndPoint).normalized());
                    validRubberBand = false;
                    /////////
                }
                else
                {
                    POCurrentRobot = getRobot(tempPos);
                    if(POCurrentRobot.agent != -1)
                        removeRobot(POCurrentRobot.agent, POCurrentRobot.index);
                    POCurrentRobot.agent= -2;
                    POCurrentRobot.index = -2;
                }
            }
        }
        else if(currentTool == TSELECT)
        {
            if(validRubberBand)
            {
                if(QRect(rbBeginPoint, rbEndPoint).normalized().contains(event->pos()))
                {
                    baseMove = event->pos();
                    moveRubberBand = true;
                    rbMoveBase = PORubberBand->geometry().topLeft();
                }
                else
                {
                    validRubberBand = false;
                    rbBeginPoint = event->pos();
                    rbStarted = true;
                    PORubberBand->setGeometry(QRect(rbBeginPoint, event->pos()).normalized());
                }
            }
            else
            {
                validRubberBand = false;
                rbBeginPoint = event->pos();
                rbStarted = true;
                PORubberBand->setGeometry(QRect(rbBeginPoint, event->pos()).normalized());
                PORubberBand->show();
            }
        }
    }
    if(POWidget->underMouse())
    {
        for(int i = 0 ; i < getAgentSize()+1; i++)
        {
            if(PODisplayModeLabel[i+1]->underMouse())
            {
                setDisplayMode(i-1);
                POSetSelectedDisplayLabel(i-1);
            }
        }

        for(int i = 0 ; i < getAgentSize(); i++)
        {
            if(POCurrentAgentLabel[i+1]->underMouse())
            {
                setCurrentAgent(i);
                POSetSelectedCurrentAgentLabel(i);
            }
        }

        for(int i = 1; i < 4; i++)
        {
            if(POTools[i]->underMouse())
            {
                POSetSelectedToolLabel(toolMode(i));
                currentTool = toolMode(i);
            }
        }

        for(int i = 1; i < 4; i++)
        {
            if(POMode[i]->underMouse())
            {
                POSetSelectedModeLabel(POMODE(i));
                currentPOMode = POMODE(i);
            }
        }

        for(int i = 4; i < 6; i++)
        {
            if(POTools[i]->underMouse())
            {
                if(i == 4)
                {
                    POTools[i]->setStyleSheet("QLabel { background-color : #0866af; background-image: url('image/white/copy.png'); background-repeat: no-repeat; background-position: center center; color : white; font-weight: bold;}");
                    POCopy(displayMode);
                }
                else if(i == 5)
                {
                    POTools[i]->setStyleSheet("QLabel { background-color : #0866af; background-image: url('image/white/paste.png'); background-repeat: no-repeat; background-position: center center; color : white; font-weight: bold;}");
                    POPaste();
                }
            }
        }

        if(event->buttons() == Qt::LeftButton)
        {
            if(POSkills[1]->text() == "+" && !POSkills[2]->isVisible())
            {
                if(POSkills[1]->underMouse())
                    POOpenSkill(2);
            }
            else if(POSkills[2]->text() == "+")
            {
                if(POSkills[2]->underMouse())
                    POOpenSkill(3);
            }


            for(int i = 0; i < 3; i++)
            {
                if(POSkills[i]->underMouse())
                {
                    setCurrentSkillNum(i);
                }
            }

        }
        else if(event->buttons() == Qt::RightButton)
        {
            if(POSkills[1]->text() != "+" && POSkills[2]->text() != "+")
            {
                if(POSkills[2]->underMouse())
                {
                    POOpenSkill(2);
                }
            }
            else if(POSkills[1]->text() != "+" && POSkills[2]->text() == "+")
            {
                if(POSkills[1]->underMouse())
                    POOpenSkill(1);
            }
        }
        POPaintSkill();
    }
}

void playoff::mouseReleased(QMouseEvent *event, QPoint tempPos)
{
    if(POFieldSelected)
    {
        if(!POCurrentRobot.isAng)
        {
            if(POCurrentRobot.index == -1)
                placeRobot(tempPos, getCurrentAgent());
            else if(POCurrentRobot.index >= 0)
                moveRobot(tempPos, POCurrentRobot.agent, POCurrentRobot.index);
        }
        else
            turnRobotAng(tempPos, POCurrentRobot.agent, POCurrentRobot.index);

        robotGeom tempGeom;
        if(POCurrentRobot.index != -1)
        {
            tempGeom = getRobotGeom(POCurrentRobot.agent, POCurrentRobot.index);
            POTBPosX->setText(QString::number(tempGeom.pos.x()));
            POTBPosY->setText(QString::number(tempGeom.pos.y()));
            POTBPosAng->setText(QString::number((int)tempGeom.angle));
            POTBPosTol->setText(QString::number(tempGeom.tolerance));
        }
    }
    if(rbStarted)
    {
        if(validRubberBand)
        {
            QPoint tempPoint = event->pos();
            if(tempPoint.x() > fieldLabel->x() + fieldLabel->width()) tempPoint.setX(fieldLabel->x() + fieldLabel->width());
            if(tempPoint.y() > fieldLabel->y() + fieldLabel->height() + _CenteralWidget_v_offset) tempPoint.setY(fieldLabel->y() + fieldLabel->height() + _CenteralWidget_v_offset);
            if(tempPoint.x() < fieldLabel->x()) tempPoint.setX(fieldLabel->x());
            if(tempPoint.y() < fieldLabel->y() + _CenteralWidget_v_offset) tempPoint.setY(fieldLabel->y() + _CenteralWidget_v_offset);
            rbEndPoint = tempPoint;
        }
        else
        {
            rbBeginPoint = rbEndPoint = QPoint(0, 0);
            PORubberBand->hide();
        }
        PORubberBand->setGeometry(QRect(rbBeginPoint, rbEndPoint).normalized());
        rbStarted = false;
    }
    else if(moveRubberBand)
    {
        rbBeginPoint = PORubberBand->geometry().topLeft();
        rbEndPoint = PORubberBand->geometry().bottomRight();
        moveRubberBand = false;

        if(currentTool == TMOVE)
            toMoveAgentList.clear();
    }
    POPaintSkill();

    POFieldSelected = false;

    POTools[4]->setStyleSheet("QLabel { background-color : #89a1b5; background-image: url('image/white/copy.png'); background-repeat: no-repeat; background-position: center center; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
    POTools[5]->setStyleSheet("QLabel { background-color : #89a1b5; background-image: url('image/white/paste.png'); background-repeat: no-repeat; background-position: center center; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
}

void playoff::mouseMoved(QMouseEvent *event, QPoint tempPos)
{
    if(POFieldSelected)
    {
        statusBar->showMessage(QString("%1, %2").arg(tempPos.x()).arg(tempPos.y()),1000);
        if(!POCurrentRobot.isAng)
        {
            if(POCurrentRobot.index == -1)
                placeRobot(tempPos, getCurrentAgent(), true);
            else if(POCurrentRobot.index >= 0)
                moveRobot(tempPos, POCurrentRobot.agent, POCurrentRobot.index, true);
        }
        else
            turnRobotAng(tempPos, POCurrentRobot.agent, POCurrentRobot.index);

        robotGeom tempGeom;
        if(POCurrentRobot.index != -1)
        {
            tempGeom = getRobotGeom(POCurrentRobot.agent, POCurrentRobot.index);
            if(!POCurrentRobot.isAng)
            {
                POTBPosX->setText(QString::number(tempPos.x()-25));
                POTBPosY->setText(QString::number(tempPos.y()-25));
            }
            else
            {
                POTBPosX->setText(QString::number(tempGeom.pos.x()));
                POTBPosY->setText(QString::number(tempGeom.pos.y()));
            }
            POTBPosAng->setText(QString::number((int)tempGeom.angle));
            POTBPosTol->setText(QString::number(tempGeom.tolerance));
        }
    }
    if(rbStarted)
    {
        QPoint tempPoint = event->pos();
        if(tempPoint.x() > fieldLabel->x() + fieldLabel->width()) tempPoint.setX(fieldLabel->x() + fieldLabel->width());
        if(tempPoint.y() > fieldLabel->y() + fieldLabel->height() + _CenteralWidget_v_offset) tempPoint.setY(fieldLabel->y() + fieldLabel->height() + _CenteralWidget_v_offset);
        if(tempPoint.x() < fieldLabel->x()) tempPoint.setX(fieldLabel->x());
        if(tempPoint.y() < fieldLabel->y() + _CenteralWidget_v_offset) tempPoint.setY(fieldLabel->y() + _CenteralWidget_v_offset);

        if(containPoint(rbBeginPoint, tempPoint, 10))
        {
            validRubberBand = false;
            PORubberBand->hide();
        }
        else
        {
            validRubberBand = true;
            PORubberBand->show();
        }

        PORubberBand->setGeometry(QRect(rbBeginPoint, tempPoint).normalized());
    }
    else if(moveRubberBand)
    {
        QPoint tempPoint = event->pos();
        QRect tempRect(rbBeginPoint, rbEndPoint);
        QPoint tempMove = tempPoint-baseMove;
        tempRect = tempRect.normalized();
        tempRect.moveTo(tempRect.topLeft()+tempMove);

        if(tempRect.topLeft().x() < fieldLabel->x()) tempRect.moveLeft(fieldLabel->x());
        if(tempRect.bottomRight().x() > fieldLabel->x() + fieldLabel->width()) tempRect.moveRight(fieldLabel->x() + fieldLabel->width());

        if(tempRect.topLeft().y() < fieldLabel->y() + _CenteralWidget_v_offset) tempRect.moveTop(fieldLabel->y() + _CenteralWidget_v_offset);
        if(tempRect.bottomRight().y() > fieldLabel->y() + fieldLabel->height() + _CenteralWidget_v_offset) tempRect.moveBottom(fieldLabel->y() + fieldLabel->height() + _CenteralWidget_v_offset);
        PORubberBand->setGeometry(tempRect);

        rbMoveChange = PORubberBand->geometry().topLeft() - rbMoveBase;
        if(currentTool == TMOVE && !toMoveAgentList.isEmpty())
        {
            moveSelectedRobots(toMoveAgentList, rbMoveChange);
        }
    }
}

void playoff::reset()
{
    for(int i = 0; i < 6; i++)
        robots[i].clear();
    currentRobot.agent = -1;
    currentRobot.index = -1;
    draw();
}

void playoff::draw()
{
    QPixmap tempPix(859, 655);
    tempPix = *fieldPix;
    QPainter painter(&tempPix);

    if(displayMode == 0 || displayMode == -1)
        drawRobots(painter, 0);
    else
        drawRobots(painter, 0, false);
    if(displayMode == 1 || displayMode == -1)
        drawRobots(painter, 1);
    else
        drawRobots(painter, 1, false);
    if(displayMode == 2 || displayMode == -1)
        drawRobots(painter, 2);
    else
        drawRobots(painter, 2, false);
    if(displayMode == 3 || displayMode == -1)
        drawRobots(painter, 3);
    else
        drawRobots(painter, 3, false);
    if(displayMode == 4 || displayMode == -1)
        drawRobots(painter, 4);
    else
        drawRobots(painter, 4, false);
    if(displayMode == 5 || displayMode == -1)
        drawRobots(painter, 5);
    else
        drawRobots(painter, 5, false);

    fieldLabel->setPixmap(tempPix);
}

void playoff::drawRobot(QPainter &painter, int x, int y, QString label, int agent, bool selected, bool blink)
{
    QPen robotPen[3];
    QBrush robotBrush;
    QRect robotRect;
    QTextOption robotFont;

    if(selected)
    {
        if(blink)
            robotPen[1].setColor(QColor(250, 194, 128, 64));
        else
            robotPen[1].setColor(QColor(250, 194, 128));

        robotPen[0].setWidth(2);

        robotBrush.setColor(QColor(57, 103, 128));
        robotBrush.setStyle(Qt::SolidPattern);
        robotPen[0].setColor(QColor(32, 79, 105, 64));

        robotPen[2].setColor(QColor(Qt::white));
    }
    else
    {

        robotPen[1].setColor(QColor(250, 194, 128));

        robotPen[0].setWidth(2);

        robotBrush.setColor(QColor(57, 103, 128, 64));
        robotBrush.setStyle(Qt::SolidPattern);
        robotPen[0].setColor(QColor(32, 79, 105, 64));

        robotPen[2].setColor(QColor(255, 255, 255, 64));
    }

    robotFont.setAlignment(Qt::AlignHCenter|Qt::AlignVCenter);


    robotRect.setRect(x - 9, y - 9, 18, 18);

    painter.setPen(robotPen[0]);
    painter.setBrush(robotBrush);
    painter.drawEllipse(robotRect);

    painter.setPen(robotPen[1]);
    painter.setFont(QFont("Arial", 9, QFont::Bold));
    painter.drawText(robotRect, label, robotFont);

    robotRect.setRect(x + 5, y - 10, 9, 9);
    painter.setPen(robotPen[0]);
    painter.setBrush(robotBrush);
    painter.drawEllipse(robotRect);
    painter.setPen(robotPen[2]);
    painter.setFont(QFont("Arial", 9, QFont::Bold));
    painter.drawText(robotRect, QString::number(agent+1), robotFont);

}

void playoff::drawRobots(QPainter &painter, int tRobotIndex, bool selected)
{
    QPen tempPen;
    tempPen.setWidth(1);

    QPen tempBPen;
    tempBPen.setWidth(3);

    if(tRobotIndex == displayMode || displayMode == -1)
        tempBPen.setColor(QColor(68, 132, 127));
    else
        tempBPen.setColor(QColor(68, 132, 127, 64));

    if(tRobotIndex == displayMode || displayMode == -1)
        tempPen.setColor(QColor(243, 223, 28));
    else
        tempPen.setColor(QColor(243, 223, 28, 64));

    if(tRobotIndex == 0)
    {
        if(tRobotIndex == displayMode || displayMode == -1)
            tempPen.setColor(QColor(243, 223, 28));
        else
            tempPen.setColor(QColor(243, 223, 28, 64));
    }
    else if(tRobotIndex == 1)
    {
        if(tRobotIndex == displayMode || displayMode == -1)
            tempPen.setColor(QColor(191, 25, 34));
        else
            tempPen.setColor(QColor(191, 25, 34, 64));
    }
    else if(tRobotIndex == 2)
    {
        if(tRobotIndex == displayMode || displayMode == -1)
            tempPen.setColor(QColor(25, 191, 148));
        else
            tempPen.setColor(QColor(25, 191, 148, 64));
    }
    else if(tRobotIndex == 3)
    {
        if(tRobotIndex == displayMode || displayMode == -1)
            tempPen.setColor(QColor(255, 131, 29));
        else
            tempPen.setColor(QColor(255, 131, 29, 64));
    }
    else if(tRobotIndex == 4)
    {
        if(tRobotIndex == displayMode || displayMode == -1)
            tempPen.setColor(QColor(231, 106, 80));
        else
            tempPen.setColor(QColor(231, 106, 80, 64));
    }
    else if(tRobotIndex == 5)
    {
        if(tRobotIndex == displayMode || displayMode == -1)
            tempPen.setColor(QColor(9, 106, 80));
        else
            tempPen.setColor(QColor(9, 106, 80, 64));
    }
//    SolidLine,
//    DashLine,
//    DotLine,
//    DashDotLine,
//    DashDotDotLine,
//    CustomDashLine

    tempPen.setStyle(Qt::DashLine);


    for(int i = 1; i < robots[tRobotIndex].length(); i++)
    {
        painter.setPen(tempBPen);
        painter.drawLine(QPoint(robots[tRobotIndex].at(i - 1).x, robots[tRobotIndex].at(i - 1).y),
                         QPoint(robots[tRobotIndex].at(i).x, robots[tRobotIndex].at(i).y));
        painter.setPen(tempPen);
        painter.drawLine(QPoint(robots[tRobotIndex].at(i - 1).x, robots[tRobotIndex].at(i - 1).y),
                         QPoint(robots[tRobotIndex].at(i).x, robots[tRobotIndex].at(i).y));
    }
    if(currentRobot.agent != -1 && (displayMode == currentRobot.agent || displayMode == -1)  && !showAll)
    {
        tempPen.setWidth(2);
        tempPen.setColor(QColor(209, 26, 28, 64));

        QRect tempCircle(QPoint(robots[currentRobot.agent].at(currentRobot.index).x, robots[currentRobot.agent].at(currentRobot.index).y)-QPoint(25, 25),
                         QSize(50, 50));
        painter.setPen(tempPen);
        painter.drawArc(tempCircle, 0, 360*16);
        QLine tempAngle;
        tempAngle.setP1(QPoint(robots[currentRobot.agent].at(currentRobot.index).x, robots[currentRobot.agent].at(currentRobot.index).y));
        tempAngle.setP2(QPoint(_RobotAngRad*cos( ( robots[currentRobot.agent].at(currentRobot.index).angle/360 )*2*3.1415 ) + robots[currentRobot.agent].at(currentRobot.index).x,
                               _RobotAngRad*sin( ( robots[currentRobot.agent].at(currentRobot.index).angle/360 )*2*3.1415 ) + robots[currentRobot.agent].at(currentRobot.index).y));
        tempPen.setColor(QColor(209, 26, 28));
        painter.setPen(tempPen);
        painter.drawLine(tempAngle);

        /*QRect tempRect(QPoint(_RobotAngRad*cos( ( robots[currentRobot.agent].at(currentRobot.index).angle/360 )*2*3.1415 ) + robots[currentRobot.agent].at(currentRobot.index).x,
                              _RobotAngRad*sin( ( robots[currentRobot.agent].at(currentRobot.index).angle/360 )*2*3.1415 ) + robots[currentRobot.agent].at(currentRobot.index).y)-QPoint(2,2),
                       QPoint(_RobotAngRad*cos( ( robots[currentRobot.agent].at(currentRobot.index).angle/360 )*2*3.1415 ) + robots[currentRobot.agent].at(currentRobot.index).x,
                              _RobotAngRad*sin( ( robots[currentRobot.agent].at(currentRobot.index).angle/360 )*2*3.1415 ) + robots[currentRobot.agent].at(currentRobot.index).y)+QPoint(2,2));*/
        painter.drawEllipse(robots[currentRobot.agent].at(currentRobot.index).angRect);

        if(robots[currentRobot.agent].at(currentRobot.index).tolerance > 0)
        {
            tempPen.setWidth(1);
            tempPen.setColor(QColor(Qt::cyan));
            tempPen.setStyle(Qt::SolidLine);
            painter.setPen(tempPen);
            QPoint tempPoint(robots[currentRobot.agent].at(currentRobot.index).tolerance,
                    robots[currentRobot.agent].at(currentRobot.index).tolerance);
            QRect tempTol(QPoint(robots[currentRobot.agent].at(currentRobot.index).x, robots[currentRobot.agent].at(currentRobot.index).y)-tempPoint,
                          QSize(robots[currentRobot.agent].at(currentRobot.index).tolerance*2,
                                robots[currentRobot.agent].at(currentRobot.index).tolerance*2));
            painter.drawArc(tempTol,0,360*16);
        }
    }
    else if(showAll)
    {
        tempPen.setStyle(Qt::SolidLine);
        for(int i = 0; i < robots[tRobotIndex].length(); i++)
        {
            tempPen.setWidth(2);
            tempPen.setColor(QColor(209, 26, 28, 64));

            QRect tempCircle(QPoint(robots[tRobotIndex].at(i).x, robots[tRobotIndex].at(i).y)-QPoint(25, 25),
                             QSize(50, 50));
            painter.setPen(tempPen);
            painter.drawArc(tempCircle, 0, 360*16);
            QLine tempAngle;
            tempAngle.setP1(QPoint(robots[tRobotIndex].at(i).x, robots[tRobotIndex].at(i).y));
            tempAngle.setP2(QPoint(_RobotAngRad*cos( ( robots[tRobotIndex].at(i).angle/360 )*2*3.1415 ) + robots[tRobotIndex].at(i).x,
                                   _RobotAngRad*sin( ( robots[tRobotIndex].at(i).angle/360 )*2*3.1415 ) + robots[tRobotIndex].at(i).y));
            tempPen.setColor(QColor(209, 26, 28));
            painter.setPen(tempPen);
            painter.drawLine(tempAngle);

            //painter.drawEllipse(robots[tRobotIndex].at(i).angRect);
        }
    }
    for(int i = 0; i < robots[tRobotIndex].length(); i++)
    {
        drawRobot(painter,
                  robots[tRobotIndex].at(i).x,
                  robots[tRobotIndex].at(i).y,
                  /*robots[tRobotIndex].at(i).label,*/QString::number(i+1),
                  robots[tRobotIndex].at(i).agent,
                  selected);
    }
}

void playoff::placeRobot(QPoint pos, int tAgent, bool tTemp)
{
    if(pos.x() < 0) pos.setX(0);
    if(pos.x() > fieldLabel->width()-1) pos.setX(fieldLabel->width()-1);
    if(pos.y() < 0) pos.setY(0);
    if(pos.y() > fieldLabel->height()-1) pos.setY(fieldLabel->height()-1);
    for(int i = 0; i < 5; i++)
    {
        for(int j = 0; j < robots[i].length(); j++)
        {
            if(robots[i].at(j).temp)
                robots[i].removeAt(j);
        }
    }
    playOffRobot tempRobot;
    tempRobot.x = pos.x();
    tempRobot.y = pos.y();
    //tempRobot.label = "A";
    tempRobot.agent = tAgent;
    tempRobot.angle = 0;
    tempRobot.angRect = QRect(QPoint(_RobotAngRad*cos( ( tempRobot.angle/360 )*2*3.1415 ) + tempRobot.x,
                                     _RobotAngRad*sin( ( tempRobot.angle/360 )*2*3.1415 ) + tempRobot.y)-QPoint(4,4),
                              QPoint(_RobotAngRad*cos( ( tempRobot.angle/360 )*2*3.1415 ) + tempRobot.x,
                                     _RobotAngRad*sin( ( tempRobot.angle/360 )*2*3.1415 ) + tempRobot.y)+QPoint(4,4));
    tempRobot.temp = tTemp;
    tempRobot.tolerance = 0;
    tempRobot.skillSize = 1;
    tempRobot.skill[0] = MoveSkill;
    tempRobot.target.agent = -1;
    tempRobot.target.index = -1;
    robots[tAgent].append(tempRobot);

    draw();
}

void playoff::moveRobot(QPoint pos, int tAgent, int tIndex, bool tTemp)
{
    if(pos.x() < 0) pos.setX(0);
    if(pos.x() > fieldLabel->width()-1) pos.setX(fieldLabel->width()-1);
    if(pos.y() < 0) pos.setY(0);
    if(pos.y() > fieldLabel->height()-1) pos.setY(fieldLabel->height()-1);
    playOffRobot tempRobot;
    tempRobot = robots[tAgent].at(tIndex);
    tempRobot.x = pos.x();
    tempRobot.y = pos.y();
    tempRobot.angRect = QRect(QPoint(_RobotAngRad*cos( ( tempRobot.angle/360 )*2*3.1415 ) + tempRobot.x,
                                     _RobotAngRad*sin( ( tempRobot.angle/360 )*2*3.1415 ) + tempRobot.y)-QPoint(4,4),
                              QPoint(_RobotAngRad*cos( ( tempRobot.angle/360 )*2*3.1415 ) + tempRobot.x,
                                     _RobotAngRad*sin( ( tempRobot.angle/360 )*2*3.1415 ) + tempRobot.y)+QPoint(4,4));
    tempRobot.temp = tTemp;
    robots[tAgent].replace(tIndex, tempRobot);

    draw();
}

void playoff::moveSelectedRobots(QList<agentAndIndex> &tList, QPoint tOffset)
{
    playOffRobot tempRobot;
    for(int i = 0; i < tList.length(); i++)
    {
        tempRobot = robots[tList.at(i).agent].at(tList.at(i).index);
        tempRobot.x = toMoveAgentFirstPointList.at(i).x() + tOffset.x();
        tempRobot.y = toMoveAgentFirstPointList.at(i).y() + tOffset.y();
        robots[tList.at(i).agent].replace(tList.at(i).index, tempRobot);
    }
    draw();
}

void playoff::turnRobotAng(QPoint pos, int tAgent, int tIndex)
{
    playOffRobot tempRobot;
    tempRobot = robots[tAgent].at(tIndex);
    double tempAng = atan2(pos.y() - tempRobot.y, pos.x() - tempRobot.x);
    tempRobot.angle = tempAng*(360/(2*3.1415));
    tempRobot.angRect = QRect(QPoint(_RobotAngRad*cos( ( tempRobot.angle/360 )*2*3.1415 ) + tempRobot.x,
                                     _RobotAngRad*sin( ( tempRobot.angle/360 )*2*3.1415 ) + tempRobot.y)-QPoint(4,4),
                              QPoint(_RobotAngRad*cos( ( tempRobot.angle/360 )*2*3.1415 ) + tempRobot.x,
                                     _RobotAngRad*sin( ( tempRobot.angle/360 )*2*3.1415 ) + tempRobot.y)+QPoint(4,4));
    robots[tAgent].replace(tIndex, tempRobot);

    draw();
}

void playoff::removeRobot(int tAgent, int tIndex)
{
    robots[tAgent].removeAt(tIndex);
    currentRobot.agent = -1;
    currentRobot.index = -1;
    draw();
}

void playoff::removeSelectedRobots(QList<agentAndIndex> &tList)
{
    for(int i = tList.length() - 1; i >= 0; i--)
    {
        robots[tList.at(i).agent].removeAt(tList.at(i).index);
    }
    currentRobot.agent = -1;
    currentRobot.index = -1;
    draw();
}

bool playoff::containPoint(QPoint point, QPoint pos, int r)
{
    if(sqrt( (pos.x() - point.x())*(pos.x() - point.x()) + (pos.y() - point.y())*(pos.y() - point.y()) ) <= r)
        return true;
    else
        return false;
}

robotAttr playoff::getRobot(QPoint pos)
{
    robotAttr tempRobot;
    for(int i = 0; i < 6; i++)
    {
        if(i == displayMode || displayMode == -1)
        {
            for(int j = 0; j < robots[i].length(); j++)
            {
                if(containPoint(pos, QPoint(robots[i].at(j).x, robots[i].at(j).y), 9))
                {
                    tempRobot.agent = i;
                    tempRobot.index = j;
                    tempRobot.isAng = false;
                    currentRobot = tempRobot;
                    return tempRobot;
                }
            }
        }
    }
    /*for(int i = 0; i < 6; i++)
    {
        if(i == displayMode || displayMode == -1)
        {
            for(int j = 0; j < robots[i].length(); j++)
            {
                if(robots[i].at(j).angRect.contains(pos))
                {
                    tempRobot.agent = i;
                    tempRobot.index = j;
                    tempRobot.isAng = true;
                    currentRobot = tempRobot;
                    return tempRobot;
                }
            }
        }
    }*/

    if(currentRobot.agent != -1 && currentRobot.index != -1)
    {
        if(robots[currentRobot.agent].at(currentRobot.index).angRect.contains(pos))
        {
            tempRobot.agent = currentRobot.agent;
            tempRobot.index = currentRobot.index;
            tempRobot.isAng = true;
            currentRobot = tempRobot;
            return tempRobot;
        }
    }

    tempRobot.agent = -1;
    tempRobot.index = -1;
    tempRobot.isAng = false;
    currentRobot = tempRobot;
    return tempRobot;
}

void playoff::setDisplayMode(int tMode)
{
    if(tMode < -1) tMode = -1;
    if(tMode > 5 ) tMode = 5;
    displayMode = tMode;
    draw();
}

int playoff::getDisplayMode()
{
    return displayMode;
}

void playoff::setCurrentAgent(int tAgent)
{
    if(tAgent < 0) tAgent = 0;
    if(tAgent > 5) tAgent = 5;
    currentAgent = tAgent;
}

int playoff::getCurrentAgent()
{
    return currentAgent;
}

void playoff::setAgentSize(int tSize)
{
    if(tSize < 1) tSize = 1;
    if(tSize > 6) tSize = 6;
    agentSize = tSize;
}

int playoff::getAgentSize()
{
    return agentSize;
}

void playoff::setShowAllFlag(bool tFlag)
{
    showAll = tFlag;
    draw();
}

robotGeom playoff::getRobotGeom(int tAgent, int tIndex)
{
    if(tAgent < 0) tAgent = 0;
    if(tAgent > 5) tAgent = 5;
    if(tIndex < 0) tIndex = 0;
    if(tIndex > robots[tAgent].length() - 1) tIndex = robots[tAgent].length() - 1;
    robotGeom tempGeom;
    tempGeom.pos = QPoint(robots[tAgent].at(tIndex).x, robots[tAgent].at(tIndex).y)-QPoint(25,25);
    tempGeom.angle = robots[tAgent].at(tIndex).angle;
    tempGeom.tolerance = robots[tAgent].at(tIndex).tolerance;
    return tempGeom;
}

int playoff::getRobotSize(int tAgent)
{
    if(tAgent < 0) tAgent = 0;
    if(tAgent > 5) tAgent = 5;
    return robots[tAgent].length();
}

void playoff::setGeomX(int tX)
{
    QPoint tempPos;
    tempPos.setY(robots[currentRobot.agent].at(currentRobot.index).y);
    tempPos.setX(tX+25);
    moveRobot(tempPos, currentRobot.agent, currentRobot.index);
}

void playoff::setGeomY(int tY)
{
    QPoint tempPos;
    tempPos.setX(robots[currentRobot.agent].at(currentRobot.index).x);
    tempPos.setY(tY+25);
    moveRobot(tempPos, currentRobot.agent, currentRobot.index);
}

void playoff::setGeomAngle(double tAng)
{
    playOffRobot tempRobot;
    tempRobot = robots[currentRobot.agent].at(currentRobot.index);
    tempRobot.angle = tAng;
    tempRobot.angRect = QRect(QPoint(_RobotAngRad*cos( ( tempRobot.angle/360 )*2*3.1415 ) + tempRobot.x,
                                     _RobotAngRad*sin( ( tempRobot.angle/360 )*2*3.1415 ) + tempRobot.y)-QPoint(4,4),
                              QPoint(_RobotAngRad*cos( ( tempRobot.angle/360 )*2*3.1415 ) + tempRobot.x,
                                     _RobotAngRad*sin( ( tempRobot.angle/360 )*2*3.1415 ) + tempRobot.y)+QPoint(4,4));
    robots[currentRobot.agent].replace(currentRobot.index, tempRobot);
    draw();
}

void playoff::setGeomTolerance(int tTol)
{
    playOffRobot tempRobot;
    tempRobot = robots[currentRobot.agent].at(currentRobot.index);
    tempRobot.tolerance = tTol;
    robots[currentRobot.agent].replace(currentRobot.index, tempRobot);
    draw();
}

void playoff::setCurrentSkillNum(int tNum)
{
    if(currentRobot.agent != -1 && currentRobot.index != -1)
    {
        if(tNum < 0) tNum = 0;
        if(tNum > robots[currentRobot.agent].at(currentRobot.index).skillSize - 1) tNum = robots[currentRobot.agent].at(currentRobot.index).skillSize - 1;
        currentRobot.skillNum = tNum;
    }
}

int playoff::getCurrentSkillNum()
{
    return currentRobot.skillNum;
}

void playoff::setCurrentSkillSize(int tSize)
{
    if(currentRobot.agent != -1 && currentRobot.index != -1)
    {
        playOffRobot tempRobot;
        tempRobot = robots[currentRobot.agent].at(currentRobot.index);
        tempRobot.skillSize = tSize;
        robots[currentRobot.agent].replace(currentRobot.index, tempRobot);
    }
}

int playoff::getCurrentSkillSize()
{
    if(currentRobot.agent != -1 && currentRobot.index != -1)
    {
        return robots[currentRobot.agent].at(currentRobot.index).skillSize;
    }
    return 1;
}

void playoff::setSkill(POffSkills tSkill, int targetAgent, int targetIndex)
{
    if(currentRobot.agent != -1 && currentRobot.index != -1)
    {
        playOffRobot tempRobot;
        tempRobot = robots[currentRobot.agent].at(currentRobot.index);
        if(targetAgent != -1 && targetIndex != -1)
        {
            tempRobot.target.agent = targetAgent;
            tempRobot.target.index = targetIndex;
        }
        tempRobot.skill[currentRobot.skillNum] = tSkill;
        robots[currentRobot.agent].replace(currentRobot.index, tempRobot);

        POPaintSkill();
    }
}

POffSkills playoff::getSkill(int &targetAgent, int &targetIndex)
{
    if(currentRobot.agent != -1 && currentRobot.index != -1)
    {
        targetAgent = robots[currentRobot.agent].at(currentRobot.index).target.agent;
        targetIndex = robots[currentRobot.agent].at(currentRobot.index).target.index;
        return robots[currentRobot.agent].at(currentRobot.index).skill[currentRobot.skillNum];
    }
}

POffSkills playoff::getSkill()
{
    int tX, tY;
    return getSkill(tX, tY);
}

POffSkills playoff::getSkill(int tSkillNum, int &targetAgent, int &targetIndex)
{
    if(currentRobot.agent != -1 && currentRobot.index != -1)
    {
        targetAgent = robots[currentRobot.agent].at(currentRobot.index).target.agent;
        targetIndex = robots[currentRobot.agent].at(currentRobot.index).target.index;
        return robots[currentRobot.agent].at(currentRobot.index).skill[tSkillNum];
    }
}

POffSkills playoff::getSkill(int tSkillNum)
{
    int tX, tY;
    return getSkill(tSkillNum, tX, tY);
}

void playoff::POinitLables()
{
    int frameHeight = POWidget->height(),
        frameWidth = POWidget->width();
    const int vMargin = 5, hMargin = 10, yStart = 90, boxHeight = 50;
    for(int i = 0; i < 8; i++)
    {
        PODisplayModeLabel[i] = new QLabel(POWidget);
        PODisplayModeLabel[i]->setAlignment(Qt::AlignCenter|Qt::AlignHCenter);
        PODisplayModeLabel[i]->setCursor(Qt::PointingHandCursor);
        if(i == 0)
        {
            PODisplayModeLabel[i]->setCursor(Qt::ArrowCursor);
            PODisplayModeLabel[i]->setGeometry(QRect(hMargin, vMargin + yStart, 70, boxHeight));
            PODisplayModeLabel[i]->setStyleSheet("QLabel { background-color : #ea8c00; color : white; font-weight: bold;}");
            PODisplayModeLabel[i]->setText("Display\nMode");
        }
        else
        {
            PODisplayModeLabel[i]->setGeometry(QRect(hMargin + ((frameWidth-(hMargin*2 + 70) )/7)*(i-1) + 70, vMargin + yStart, (frameWidth-(hMargin*2+70))/7, 50));
            PODisplayModeLabel[i]->setStyleSheet("QLabel { background-color : #89a1b5; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
            if(i == 1)
                PODisplayModeLabel[i]->setText("All");
            else
                PODisplayModeLabel[i]->setText(QString::number(i - 1));
        }
    }

    for(int i = 0; i < 7; i++)
    {
        POCurrentAgentLabel[i] = new QLabel(POWidget);
        POCurrentAgentLabel[i]->setAlignment(Qt::AlignCenter|Qt::AlignHCenter);
        POCurrentAgentLabel[i]->setCursor(Qt::PointingHandCursor);
        if(i == 0)
        {
            POCurrentAgentLabel[i]->setCursor(Qt::ArrowCursor);
            POCurrentAgentLabel[i]->setGeometry(QRect(hMargin, vMargin*2 + yStart + boxHeight, 70, boxHeight));
            POCurrentAgentLabel[i]->setStyleSheet("QLabel { background-color : #ea8c00; color : white; font-weight: bold;}");
            POCurrentAgentLabel[i]->setText("Current\nAgent");
        }
        else
        {
            POCurrentAgentLabel[i]->setGeometry(QRect(hMargin + ((frameWidth-(hMargin*2 + 70) )/6)*(i-1) + 70, vMargin*2 + yStart + boxHeight , (frameWidth-(hMargin*2+70))/6, 50));
            POCurrentAgentLabel[i]->setStyleSheet("QLabel { background-color : #89a1b5; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
            POCurrentAgentLabel[i]->setText(QString::number(i));
        }
    }

    for(int i = 0; i < 3; i++)
    {
        POSkills[i] = new QLabel(POWidget);
        POSkills[i]->setAlignment(Qt::AlignCenter|Qt::AlignHCenter);
        POSkills[i]->setCursor(Qt::PointingHandCursor);
        POSkills[i]->setText("+");
        POSkills[i]->setGeometry(QRect(hMargin, (vMargin + 50)*i + 245, 50, 50));
        POSkills[i]->setStyleSheet("QLabel { background-color : #ddd; color : #999; font-weight: bold; font-size: 16px;} QLabel:HOVER { background-color: #bbb; color: #777;}");
        POSkills[i]->setVisible(false);
        for(int j = 0; j < 2; j++)
        {
            POTiming[i*2 + j] = new QLineEdit(POWidget);
            POTiming[i*2 + j]->setGeometry(QRect(hMargin*2 + (75+hMargin)*j + 30 + frameWidth/2, (vMargin + 50)*i + 245 + vMargin*2, 45, 50 - vMargin*4));
            POTiming[i*2 + j]->setText("1000");
            POTiming[i*2 + j]->setVisible(false);

            POTimingLable[i*2 + j] = new QLabel(POWidget);
            POTimingLable[i*2 + j]->setStyleSheet("QLabel { background: transparent; color : #999; font-weight: bold; font-size: 10px;}");
            POTimingLable[i*2 + j]->setGeometry(QRect(hMargin*2 + (75+hMargin)*j + frameWidth/2, (vMargin + 50)*i + 245 + vMargin, 30, 50 - vMargin*2));
            POTimingLable[i*2 + j]->setVisible(false);
        }
        POTimingLable[i*2]->setGeometry(QRect(hMargin*2 + frameWidth/2 - 20, (vMargin + 50)*i + 245 + vMargin, 50, 50 - vMargin*2));
        POTimingLable[i*2]->setText("Duration\n(ms)");
        POTimingLable[i*2 + 1]->setText("Wait\n(ms)");
    }
    POSkills[0]->setVisible(true);
    POOpenSkill(1);

    POPaintSkill();

    // tools
    int toolVOffset = 500;
    for(int i = 0; i < 6; i++)
    {
        POTools[i] = new QLabel(POWidget);
        POTools[i]->setAlignment(Qt::AlignCenter|Qt::AlignHCenter);
        POTools[i]->setCursor(Qt::PointingHandCursor);
        if(i == 0)
        {
            POTools[i]->setCursor(Qt::ArrowCursor);
            POTools[i]->setGeometry(QRect(hMargin, vMargin + yStart + toolVOffset, 70, boxHeight));
            POTools[i]->setStyleSheet("QLabel { background-color : #ea8c00; color : white; font-weight: bold;}");
            POTools[i]->setText("Tool\nMode");
        }
        else
        {
            POTools[i]->setGeometry(QRect(hMargin + ((frameWidth-(hMargin*2 + 70) )/5)*(i-1) + 70, vMargin + yStart + toolVOffset, (frameWidth-(hMargin*2+70))/5, 50));
            if(i == 1)
            {
                POTools[i]->setStyleSheet("QLabel { background-color : #89a1b5; background-image: url('image/white/move.png'); background-repeat: no-repeat; background-position: center center; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
                POTools[i]->setToolTip("Add/Move");
            }
            else if(i == 2)
            {
                POTools[i]->setStyleSheet("QLabel { background-color : #89a1b5; background-image: url('image/white/delete.png'); background-repeat: no-repeat; background-position: center center; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
                POTools[i]->setToolTip("Remove");
            }
            else if(i == 3)
            {
                POTools[i]->setStyleSheet("QLabel { background-color : #89a1b5; background-image: url('image/white/select.png'); background-repeat: no-repeat; background-position: center center; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
                POTools[i]->setToolTip("Select");
            }
            else if(i == 4)
            {
                POTools[i]->setStyleSheet("QLabel { background-color : #89a1b5; background-image: url('image/white/copy.png'); background-repeat: no-repeat; background-position: center center; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
                POTools[i]->setToolTip("Copy");
            }
            else if(i == 5)
            {
                POTools[i]->setStyleSheet("QLabel { background-color : #89a1b5; background-image: url('image/white/paste.png'); background-repeat: no-repeat; background-position: center center; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
                POTools[i]->setToolTip("Paste");
            }
        }
    }
    POSetSelectedToolLabel(currentTool);
    // tools

    //POMode
    toolVOffset = 445;
    for(int i = 0; i < 4; i++)
    {
        POMode[i] = new QLabel(POWidget);
        POMode[i]->setAlignment(Qt::AlignCenter|Qt::AlignHCenter);
        POMode[i]->setCursor(Qt::PointingHandCursor);
        if(i == 0)
        {
            POMode[i]->setCursor(Qt::ArrowCursor);
            POMode[i]->setGeometry(QRect(hMargin, vMargin + yStart + toolVOffset, 70, boxHeight));
            POMode[i]->setStyleSheet("QLabel { background-color : #ea8c00; color : white; font-weight: bold;}");
            POMode[i]->setText("PlayOff\nMode");
        }
        else
        {
            POMode[i]->setGeometry(QRect(hMargin + ((frameWidth-(hMargin*2 + 70) )/3)*(i-1) + 70, vMargin + yStart + toolVOffset, (frameWidth-(hMargin*2+70))/3, 50));
            POMode[i]->setStyleSheet("QLabel { background-color : #89a1b5; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
            if(i == 1)
                POMode[i]->setText("Kick-Off");
            else if(i == 2)
                POMode[i]->setText("Direct");
            else if(i == 3)
                POMode[i]->setText("Indirect");
        }
    }
    POSetSelectedModeLabel(currentPOMode);
    //POMode
}

void playoff::POSetSelectedDisplayLabel(int index)
{
    for(int i = 1; i < getAgentSize()+2; i++)
    {
        if(index+2 == i)
            PODisplayModeLabel[i]->setStyleSheet("QLabel { background-color : #0866af; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
        else
            PODisplayModeLabel[i]->setStyleSheet("QLabel { background-color : #89a1b5; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
    }
    for(int i = getAgentSize()+2; i < 8; i++)
    {
        PODisplayModeLabel[i]->setStyleSheet("QLabel { background-color : #bbb; color : #ccc; font-weight: bold;}");
    }
}

void playoff::POSetSelectedCurrentAgentLabel(int index)
{
    for(int i = 1; i < getAgentSize()+1; i++)
    {
        if(index+1 == i)
            POCurrentAgentLabel[i]->setStyleSheet("QLabel { background-color : #0866af; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
        else
            POCurrentAgentLabel[i]->setStyleSheet("QLabel { background-color : #89a1b5; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
    }
    for(int i = getAgentSize()+1; i < 7; i++)
    {
        POCurrentAgentLabel[i]->setStyleSheet("QLabel { background-color : #bbb; color : #ccc; font-weight: bold;}");
    }
}

void playoff::POSetSelectedToolLabel(toolMode tTMode)
{
    for(int i = 1; i < 6; i++)
    {
        if(toolMode(i) == tTMode)
        {
            if(i == 1)
                POTools[i]->setStyleSheet("QLabel { background-color : #0866af; background-image: url('image/white/move.png'); background-repeat: no-repeat; background-position: center center; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
            else if(i == 2)
                POTools[i]->setStyleSheet("QLabel { background-color : #0866af; background-image: url('image/white/delete.png'); background-repeat: no-repeat; background-position: center center; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
            else if(i == 3)
                POTools[i]->setStyleSheet("QLabel { background-color : #0866af; background-image: url('image/white/select.png'); background-repeat: no-repeat; background-position: center center; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
            else if(i == 4)
                POTools[i]->setStyleSheet("QLabel { background-color : #0866af; background-image: url('image/white/copy.png'); background-repeat: no-repeat; background-position: center center; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
            else if(i == 5)
                POTools[i]->setStyleSheet("QLabel { background-color : #0866af; background-image: url('image/white/paste.png'); background-repeat: no-repeat; background-position: center center; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
        }
        else
        {
            if(i == 1)
                POTools[i]->setStyleSheet("QLabel { background-color : #89a1b5; background-image: url('image/white/move.png'); background-repeat: no-repeat; background-position: center center; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
            else if(i == 2)
                POTools[i]->setStyleSheet("QLabel { background-color : #89a1b5; background-image: url('image/white/delete.png'); background-repeat: no-repeat; background-position: center center; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
            else if(i == 3)
                POTools[i]->setStyleSheet("QLabel { background-color : #89a1b5; background-image: url('image/white/select.png'); background-repeat: no-repeat; background-position: center center; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
            else if(i == 4)
                POTools[i]->setStyleSheet("QLabel { background-color : #89a1b5; background-image: url('image/white/copy.png'); background-repeat: no-repeat; background-position: center center; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
            else if(i == 5)
                POTools[i]->setStyleSheet("QLabel { background-color : #89a1b5; background-image: url('image/white/paste.png'); background-repeat: no-repeat; background-position: center center; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
        }
    }
}

void playoff::POSetSelectedModeLabel(POMODE tPOMode)
{
    for(int i = 1; i < 4; i++)
    {
        if(POMODE(i) == tPOMode)
            POMode[i]->setStyleSheet("QLabel { background-color : #0866af; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
        else
            POMode[i]->setStyleSheet("QLabel { background-color : #89a1b5; color : white; font-weight: bold;} QLabel:HOVER { background-color : #2f78b3; }");
    }
}

void playoff::POOpenSkill(int index, bool temp)
{
    int frameHeight = POWidget->height(),
        frameWidth = POWidget->width();

    if(temp)
        setCurrentSkillSize(index);

    for(int i = 0; i < index; i++)
    {
        POSkills[i]->setText("   Skill: NA");
        POSkills[i]->setGeometry(QRect(POSkills[i]->geometry().topLeft(), QSize(frameWidth-20-5, 50)));
        POSkills[i]->setStyleSheet("QLabel { background-color : #ddd; color : #999; font-weight: bold; font-size: 16px;}");
        POSkills[i]->setAlignment(Qt::AlignLeft|Qt::AlignVCenter);
        POSkills[i]->setVisible(true);
        for(int j = 0; j < 2; j++)
        {
            //POTiming[index*2 + j]->setGeometry(QRect(hMargin*2 + (75+hMargin)*j + 30 + frameWidth/2, (vMargin + 50)*i + 245 + vMargin*2, 45, 50 - vMargin*4));
            POTiming[i*2 + j]->setText("1000");
            POTiming[i*2 + j]->setVisible(true);

            //POTimingLable[index*2 + j]->setGeometry(QRect(hMargin*2 + (75+hMargin)*j + frameWidth/2, (vMargin + 50)*i + 245 + vMargin, 30, 50 - vMargin*2));
            POTimingLable[i*2 + j]->setVisible(true);
        }
    }
    if(index<3)
    {
        POSkills[index]->setVisible(true);
        POSkills[index]->setText("+");
        POSkills[index]->setGeometry(QRect(POSkills[index]->geometry().topLeft(), QSize(50, 50)));
        POSkills[index]->setStyleSheet("QLabel { background-color : #ddd; color : #999; font-weight: bold; font-size: 16px;} QLabel:HOVER { background-color: #bbb; color: #777;}");
        POSkills[index]->setAlignment(Qt::AlignHCenter|Qt::AlignVCenter);
        for(int j = 0; j < 2; j++)
        {
            POTiming[index*2 + j]->setVisible(false);
            POTimingLable[index*2 + j]->setVisible(false);
        }
    }
    for(int i = index+1; i < 3; i++)
    {
        POSkills[i]->setVisible(false);
        for(int j = 0; j < 2; j++)
        {
            POTiming[i*2 + j]->setVisible(false);
            POTimingLable[i*2 + j]->setVisible(false);
        }
    }
}

void playoff::POSetSkill(int tAgent, int tIndex, int tSkillNum, POffSkills tSkill)
{

}

void playoff::POPaintSkill()
{
    POOpenSkill(getCurrentSkillSize(), false);
    for(int i = 0; i < 3; i++)
    {
        if(getCurrentSkillNum() == i)
            POSkills[i]->setStyleSheet("QLabel { background-color : #ddd; color : #999; font-weight: bold; font-size: 16px; border: 1px solid #555;}");
        else
            POSkills[i]->setStyleSheet("QLabel { background-color : #ddd; color : #999; font-weight: bold; font-size: 16px;}");
    }


    for(int i = 0; i < 3; i++)
    {
        switch(getSkill(i))
        {
            case MoveSkill:
                POSkills[i]->setText("   Skill: Move");
            break;
            case PassSkill:
                POSkills[i]->setText("   Skill: Pass");
            break;
            case ReceivePassSkill:
                POSkills[i]->setText("   Skill: Receive");
            break;
            case ShotToGoalSkill:
                POSkills[i]->setText("   Skill: Shot");
            break;
            case ChipToGoalSkill:
                POSkills[i]->setText("   Skill: Chip");
            break;
            case OneTouchSkill:
                POSkills[i]->setText("   Skill: OneTouch");
            break;
        }
    }
}

QList<agentAndIndex> playoff::getSelectedAgents(int filter)
{
    QPoint tempOffset(fieldLabel->x(), fieldLabel->y() + _CenteralWidget_v_offset);
    QRect tempRect(PORubberBand->geometry().topLeft() - tempOffset,
                   PORubberBand->geometry().bottomRight() - tempOffset);
    QList<agentAndIndex> tempList;
    agentAndIndex tempAAI;


    for(int i = 0; i < 6; i++)
    {
        if(filter == i || filter == -1)
        {
            for(int j = 0; j < robots[i].length(); j++)
            {
                if( tempRect.contains(QPoint(robots[i].at(j).x, robots[i].at(j).y)) )
                {
                    tempAAI.agent = i;
                    tempAAI.index = j;
                    tempList.append(tempAAI);
                }
            }
        }
    }

    return tempList;
}

void playoff::fillFirstPointsList(QList<agentAndIndex> &tList)
{
    toMoveAgentFirstPointList.clear();
    for(int i = 0; i < tList.length(); i++)
    {
        toMoveAgentFirstPointList.append(QPoint(robots[tList.at(i).agent].at(tList.at(i).index).x,
                                                robots[tList.at(i).agent].at(tList.at(i).index).y));
    }
}

void playoff::POCopy(int filter)
{
    qDebug()<<"copy";
    for(int i = 0; i < 6; i++)
        copyRobotList[i].clear();

    QPoint tempOffset(fieldLabel->x(), fieldLabel->y() + _CenteralWidget_v_offset);
    QRect tempRect(PORubberBand->geometry().topLeft() - tempOffset,
                   PORubberBand->geometry().bottomRight() - tempOffset);

    for(int i = 0; i < 6; i++)
    {
        if(filter == i || filter == -1)
        {
            for(int j = 0; j < robots[i].length(); j++)
            {
                if( tempRect.contains(QPoint(robots[i].at(j).x, robots[i].at(j).y)) )
                {
                    copyRobotList[i].append(robots[i].at(j));
                }
            }
        }
    }
}

void playoff::POPaste()
{
    qDebug()<<"paste";
    if(!copyRobotList[5].isEmpty())
        agentSizeCB->setCurrentIndex(5);
    else if(!copyRobotList[4].isEmpty() && agentSizeCB->currentIndex() < 4)
        agentSizeCB->setCurrentIndex(4);
    else if(!copyRobotList[3].isEmpty() && agentSizeCB->currentIndex() < 3)
        agentSizeCB->setCurrentIndex(3);
    else if(!copyRobotList[2].isEmpty() && agentSizeCB->currentIndex() < 2)
        agentSizeCB->setCurrentIndex(2);
    else if(!copyRobotList[1].isEmpty() && agentSizeCB->currentIndex() < 1)
        agentSizeCB->setCurrentIndex(1);
    for(int i = 0; i < 6; i++)
    {
        for(int j = 0; j < copyRobotList[i].length(); j++)
        {
            robots[i].append(copyRobotList[i].at(j));
        }
    }
    draw();
}

